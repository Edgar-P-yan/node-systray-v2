{"version":3,"file":"index.esm.js","sources":["../src/get-tray-bin-path.ts","../src/index.ts"],"sourcesContent":["import * as path from 'path';\nimport * as os from 'os';\nimport * as fs from 'fs';\n\nexport function getTrayBinPath(\n  debug = false,\n  copyDir: boolean | string = false,\n): string {\n  const binName = (\n    {\n      win32: `tray_windows${debug ? '' : '_release'}.exe`,\n      darwin: `tray_darwin${debug ? '' : '_release'}`,\n      linux: `tray_linux${debug ? '' : '_release'}`,\n    } as Record<string, string>\n  )[process.platform];\n\n  if (!binName) {\n    throw new Error(\n      `node-systray-v2: unsupported platform ${process.platform}.`,\n    );\n  }\n\n  const binPath = path.resolve(`${getDirName()}/../traybin/${binName}`);\n\n  if (copyDir) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const pkg = require('../package.json');\n\n    copyDir = path.join(\n      typeof copyDir === 'string'\n        ? copyDir\n        : `${os.homedir()}/.cache/node-systray/`,\n      pkg.version,\n    );\n\n    const copyDistPath = path.join(copyDir, binName);\n    if (!fs.existsSync(copyDistPath)) {\n      fs.mkdirSync(copyDir, { recursive: true });\n      fs.copyFileSync(binPath, copyDistPath);\n    }\n\n    return copyDistPath;\n  }\n\n  return binPath;\n}\n\nconst getDirName = (function getDirNameScope() {\n  return () => __dirname;\n})();\n","import * as child from 'child_process';\nimport * as readline from 'readline';\nimport { getTrayBinPath } from './get-tray-bin-path';\nimport { EventEmitter } from 'events';\nimport xdebug from 'debug';\n\nconst debug = xdebug('systray');\n\nexport type MenuItem = {\n  title: string;\n  tooltip: string;\n  checked: boolean;\n  enabled: boolean;\n};\n\nexport type Menu = {\n  icon: string;\n  title: string;\n  tooltip: string;\n  items: MenuItem[];\n};\n\nexport type ClickEvent = {\n  type: 'clicked';\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type ReadyEvent = {\n  type: 'ready';\n};\n\nexport type Event = ClickEvent | ReadyEvent;\n\nexport type UpdateItemAction = {\n  type: 'update-item';\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type UpdateMenuAction = {\n  type: 'update-menu';\n  menu: Menu;\n  seq_id: number;\n};\n\nexport type UpdateMenuAndItemAction = {\n  type: 'update-menu-and-item';\n  menu: Menu;\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type Action =\n  | UpdateItemAction\n  | UpdateMenuAction\n  | UpdateMenuAndItemAction;\n\nexport type Conf = {\n  menu: Menu;\n  debug?: boolean;\n  copyDir?: boolean | string;\n};\n\nconst CHECK_STR = ' (âˆš)';\n\nfunction updateCheckedInLinux(item: MenuItem): MenuItem {\n  if (process.platform !== 'linux') {\n    return item;\n  }\n  if (item.checked) {\n    item.title += CHECK_STR;\n  } else {\n    item.title = (item.title || '').replace(RegExp(CHECK_STR + '$'), '');\n  }\n  return item;\n}\n\nexport class SysTray extends EventEmitter {\n  protected _conf: Conf;\n  protected _process: child.ChildProcess;\n  protected _rl: readline.ReadLine;\n  protected _binPath: string;\n\n  constructor(conf: Conf) {\n    super();\n\n    this._conf = conf;\n    this._binPath = getTrayBinPath(conf.debug, conf.copyDir);\n    this._process = child.spawn(this._binPath, [], {\n      windowsHide: true,\n    });\n\n    this._rl = readline.createInterface({\n      input: this._process.stdout!,\n    });\n\n    conf.menu.items = conf.menu.items.map(updateCheckedInLinux);\n    this._rl.on('line', (data) => debug('onLine', data));\n    this.onReady(() => this.writeLine(JSON.stringify(conf.menu)));\n  }\n\n  onReady(listener: () => void): this {\n    this._rl.on('line', (line: string) => {\n      const action: Event = JSON.parse(line);\n      if (action.type === 'ready') {\n        listener();\n        debug('onReady', action);\n      }\n    });\n    return this;\n  }\n\n  onClick(listener: (action: ClickEvent) => void): this {\n    this._rl.on('line', (line: string) => {\n      const action: ClickEvent = JSON.parse(line);\n      if (action.type === 'clicked') {\n        debug('onClick', action);\n        listener(action);\n      }\n    });\n    return this;\n  }\n\n  writeLine(line: string): this {\n    if (line) {\n      debug('writeLine', line + '\\n', '=====');\n      this._process.stdin!.write(line.trim() + '\\n');\n    }\n    return this;\n  }\n\n  sendAction(action: Action): this {\n    switch (action.type) {\n      case 'update-item':\n        action.item = updateCheckedInLinux(action.item);\n        break;\n      case 'update-menu':\n        action.menu.items = action.menu.items.map(updateCheckedInLinux);\n        break;\n      case 'update-menu-and-item':\n        action.menu.items = action.menu.items.map(updateCheckedInLinux);\n        action.item = updateCheckedInLinux(action.item);\n        break;\n    }\n    debug('sendAction', action);\n    this.writeLine(JSON.stringify(action));\n    return this;\n  }\n  kill(): void {\n    this._rl.close();\n    this._process.kill();\n  }\n\n  onExit(listener: (code: number | null, signal: string | null) => void): void {\n    this._process.on('exit', listener);\n  }\n\n  onError(listener: (err: Error) => void): void {\n    this._process.on('error', (err) => {\n      debug('onError', err, 'binPath', this.binPath);\n      listener(err);\n    });\n  }\n\n  get killed(): boolean {\n    return this._process.killed;\n  }\n\n  get binPath(): string {\n    return this._binPath;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAIM;AAIJ;;;;AAMC;;;AAMA;AAED;AAEA;;AAEE;;AAII;AACA;;AAKJ;;AAEE;AACD;AAED;AACD;AAED;AACF;AAEA;AACE;AACF;;AC3CA;AA0DA;AAEA;AACE;AACE;AACD;;AAEC;AACD;AAAM;;AAEN;AACD;AACF;AAEM;AAMJ;AACE;AAEA;AACA;AACA;AACE;AACD;AAED;AACE;AACD;AAED;AACA;;;AAIF;;;AAGI;AACE;AACA;AACD;AACH;AACA;;AAGF;;;AAGI;AACE;;AAED;AACH;AACA;;AAGF;AACE;;AAEE;AACD;AACD;;AAGF;;AAEI;;;AAGA;AACE;;AAEF;AACE;;;AAGH;AACD;;AAEA;;;AAGA;AACA;;AAGF;;;AAIA;;;;AAIE;;AAGF;AACE;;AAGF;;;AAGD;;"}