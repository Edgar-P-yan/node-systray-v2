{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import * as child from 'child_process';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as fs from 'fs-extra';\nimport { EventEmitter } from 'events';\nimport * as readline from 'readline';\nimport Debug from 'debug';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../package.json');\nconst debug = Debug('systray');\n\nexport type MenuItem = {\n  title: string;\n  tooltip: string;\n  checked: boolean;\n  enabled: boolean;\n};\n\nexport type Menu = {\n  icon: string;\n  title: string;\n  tooltip: string;\n  items: MenuItem[];\n};\n\nexport type ClickEvent = {\n  type: 'clicked';\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type ReadyEvent = {\n  type: 'ready';\n};\n\nexport type Event = ClickEvent | ReadyEvent;\n\nexport type UpdateItemAction = {\n  type: 'update-item';\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type UpdateMenuAction = {\n  type: 'update-menu';\n  menu: Menu;\n  seq_id: number;\n};\n\nexport type UpdateMenuAndItemAction = {\n  type: 'update-menu-and-item';\n  menu: Menu;\n  item: MenuItem;\n  seq_id: number;\n};\n\nexport type Action =\n  | UpdateItemAction\n  | UpdateMenuAction\n  | UpdateMenuAndItemAction;\n\nexport type Conf = {\n  menu: Menu;\n  debug?: boolean;\n  copyDir?: boolean | string;\n};\n\nconst getTrayBinPath = (\n  debug = false,\n  copyDir: boolean | string = false,\n): string => {\n  const binName = (\n    {\n      win32: `tray_windows${debug ? '' : '_release'}.exe`,\n      darwin: `tray_darwin${debug ? '' : '_release'}`,\n      linux: `tray_linux${debug ? '' : '_release'}`,\n    } as Record<string, string>\n  )[process.platform];\n\n  if (!binName) {\n    throw new Error(\n      `node-systray-v2: unsupported platform ${process.platform}.`,\n    );\n  }\n\n  const binPath = path.resolve(`${__dirname}/../traybin/${binName}`);\n\n  if (copyDir) {\n    copyDir = path.join(\n      typeof copyDir === 'string'\n        ? copyDir\n        : `${os.homedir()}/.cache/node-systray/`,\n      pkg.version,\n    );\n\n    const copyDistPath = path.join(copyDir, binName);\n    if (!fs.existsSync(copyDistPath)) {\n      fs.ensureDirSync(copyDir);\n      fs.copySync(binPath, copyDistPath);\n    }\n\n    return copyDistPath;\n  }\n\n  return binPath;\n};\n\nconst CHECK_STR = ' (âˆš)';\n\nfunction updateCheckedInLinux(item: MenuItem): MenuItem {\n  if (process.platform !== 'linux') {\n    return item;\n  }\n  if (item.checked) {\n    item.title += CHECK_STR;\n  } else {\n    item.title = (item.title || '').replace(RegExp(CHECK_STR + '$'), '');\n  }\n  return item;\n}\n\nexport default class SysTray extends EventEmitter {\n  protected _conf: Conf;\n  protected _process: child.ChildProcess;\n  protected _rl: readline.ReadLine;\n  protected _binPath: string;\n\n  constructor(conf: Conf) {\n    super();\n\n    this._conf = conf;\n    this._binPath = getTrayBinPath(conf.debug, conf.copyDir);\n    this._process = child.spawn(this._binPath, [], {\n      windowsHide: true,\n    });\n\n    this._rl = readline.createInterface({\n      input: this._process.stdout!,\n    });\n\n    conf.menu.items = conf.menu.items.map(updateCheckedInLinux);\n    this._rl.on('line', (data) => debug('onLine', data));\n    this.onReady(() => this.writeLine(JSON.stringify(conf.menu)));\n  }\n\n  onReady(listener: () => void): this {\n    this._rl.on('line', (line: string) => {\n      const action: Event = JSON.parse(line);\n      if (action.type === 'ready') {\n        listener();\n        debug('onReady', action);\n      }\n    });\n    return this;\n  }\n\n  onClick(listener: (action: ClickEvent) => void): this {\n    this._rl.on('line', (line: string) => {\n      const action: ClickEvent = JSON.parse(line);\n      if (action.type === 'clicked') {\n        debug('onClick', action);\n        listener(action);\n      }\n    });\n    return this;\n  }\n\n  writeLine(line: string): this {\n    if (line) {\n      debug('writeLine', line + '\\n', '=====');\n      this._process.stdin!.write(line.trim() + '\\n');\n    }\n    return this;\n  }\n\n  sendAction(action: Action): this {\n    switch (action.type) {\n      case 'update-item':\n        action.item = updateCheckedInLinux(action.item);\n        break;\n      case 'update-menu':\n        action.menu.items = action.menu.items.map(updateCheckedInLinux);\n        break;\n      case 'update-menu-and-item':\n        action.menu.items = action.menu.items.map(updateCheckedInLinux);\n        action.item = updateCheckedInLinux(action.item);\n        break;\n    }\n    debug('sendAction', action);\n    this.writeLine(JSON.stringify(action));\n    return this;\n  }\n  /**\n   * Kill the systray process.\n   *\n   * ## Change notes:\n   * ### v2.0.0\n   * Removed parameter `exitNode` that automatically killed nodejs process when systray exitted.\n   */\n  kill(): void {\n    this._rl.close();\n    this._process.kill();\n  }\n\n  onExit(listener: (code: number | null, signal: string | null) => void): void {\n    this._process.on('exit', listener);\n  }\n\n  onError(listener: (err: Error) => void): void {\n    this._process.on('error', (err) => {\n      debug('onError', err, 'binPath', this.binPath);\n      listener(err);\n    });\n  }\n\n  get killed(): boolean {\n    return this._process.killed;\n  }\n\n  get binPath(): string {\n    return this._binPath;\n  }\n}\n"],"names":["Debug","path","os","fs","EventEmitter","child","readline"],"mappings":"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"}